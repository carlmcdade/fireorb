<?php
// $Id: archive.module,v 1.87.2.2 2006/11/15 22:00:29 killes Exp $

/**
 * @file
 * Displays a calendar to navigate old content.
 */

/**
 * Implementation of hook_help().
 */
function archive_help($section) {
  switch ($section) {
    case 'admin/help#archive':
      $output = '<p>'. fo_1_text('The archive page allows content to be viewed by date.  It also provides a monthly calendar view that users can use to navigate through content.') .'</p>';
      $output .= '<p>'. fo_1_text('To view the archive by date, select the date in the calendar.  Administrators can enable the <em>browse archives</em> block in block administration to allow users to browse by calendar.  Clicking on a date in the monthly calendar view shows the content for that date.  Users can navigate to different months using arrows beside the month\'s name in the calendar display.   The current date will be highlighted in the calendar.') .'</p>';
      $output .= fo_1_text('<p>You can</p>
<ul>
<li>view your <a href="%archive">archive by day</a>.</li>
<li>enable the <em>browse archives</em> block at <a href="%admin-block">administer &gt;&gt; block</a>.</li>
</ul>
', array('%archive' => fo_1_url('archive'), '%admin-block' => fo_1_url('admin/block')));
      $output .= '<p>'. fo_1_text('For more information please read the configuration and customization handbook <a href="%archive">Archive page</a>.', array('%archive' => 'http://fireorb.info/handbook/modules/archive/')) .'</p>';
      return $output;
    case 'admin/modules#description':
      return fo_1_text('Displays a calendar for navigating older content.');
  }
}

/**
 * Implementation of hook_menu().
 */
function archive_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'archive',
      'title' => fo_1_text('archives'),
      'access' => user_access('access content'),
      'callback' => 'archive_page',
      'type' => MENU_SUGGESTED_ITEM);
  }
	
	$items[] = array(
		  'path' => 'admin/archive',
      'title' => fo_1_text('archives'),
      'access' => user_access('access content'),
      'callback' => 'archive_page',
      'type' => MENU_SUGGESTED_ITEM);
 
	$items[] = array(
		  'path' => 'admin/settings/archive',
      'title' => fo_1_text('archives'),
      'access' => user_access('access content'),
      'callback' => 'archive_page',
      'type' => MENU_SUGGESTED_ITEM);

  return $items;
}

/**
 * Implementation of hook_block().
 *
 * Generates a calendar for the current month, with links to the archives
 * for each day.
 */
function archive_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks[0]['info'] = fo_1_text('Calendar to browse archives');
    return $blocks;
  }
  else if ($op == 'view' && user_access('access content')) {
    $block['subject'] = fo_1_text('Browse archives');
    $block['content'] = archive_calendar();
    return $block;
  }
}

/**
 * Generates a monthly calendar, for display in the archive block.
 */
function archive_calendar() {
  global $user;

  // Extract today's date:
  $start_of_today = mktime(0, 0, 0, date('n', time()), date('d', time()), date('Y', time())) + $user->timezone;
  $end_of_today = mktime(23, 59, 59, date('n', time()), date('d', time()), date('Y', time())) + $user->timezone;

  // Extract the requested date:
  if (arg(0) == 'archive' && arg(3)) {
    $year = arg(1);
    $month = arg(2);
    $day = arg(3);

    $requested = mktime(0, 0, 0, $month, $day, $year) + $user->timezone;
  }
  else {
    $year = date('Y', time());
    $month  = date('n', time());
    $day = date('d', time());

    $requested = $end_of_today + $user->timezone;
  }

  $start_of_month = mktime(0, 0, 0, $month, 1, $year);

  // Extract first day of the month:
  $first = date('w', $start_of_month);

  // Extract last day of the month:
  $last = date('t', $start_of_month);

  $end_of_month = mktime(23, 59, 59, $month, $last, $year);

  $cache = fo_1_cache_get("archive:calendar:$day-$month-$year");

  if (!empty($cache)) {
    return $cache->data;
  }

  // Calculate previous and next months dates and check for shorter months (28/30 days)
  $prevmonth = mktime(23, 59, 59, $month - 1, 1, $year);
  $prev = mktime(23, 59, 59, $month - 1, min(date('t', $prevmonth), $day), $year);
  $nextmonth = mktime(23, 59, 59, $month + 1, 1, $year);
  $next = mktime(23, 59, 59, $month + 1, min(date('t', $nextmonth), $day), $year);

  $sql = 'SELECT n.nid, n.created FROM {node} n WHERE n.status = 1 AND n.created > %d AND n.created < %d ORDER BY n.created';
  $sql = db_rewrite_sql($sql);
  $result = db_query($sql, $start_of_month, $end_of_month);

  $days_with_posts = array();
  while ($day_with_post = db_fetch_object($result)) {
    $daynum = date('j', $day_with_post->created + $user->timezone);
    if (isset($days_with_posts[$daynum])) {
      $days_with_posts[$daynum]++;
    }
    else {
      $days_with_posts[$daynum] = 1;
    }
  }

  // Generate calendar header:
  $output .= "\n<!-- calendar -->\n";
  $output .= '<div class="calendar">';
  $output .= '<table summary="'. fo_1_text('A calendar to browse the archives') .".\">\n";
  $output .= ' <caption>'. fo_1_link('«', 'archive/'. date('Y/m/d', $prev), array('title' => fo_1_text('Previous month'))) .' '. fo_1_format_date($requested, 'custom', 'F') . date(' Y', $requested) .' '. ($nextmonth <= time() ? fo_1_link('»', 'archive/'. date('Y/m/d', $next), array('title' => fo_1_text('Next month'))) : ' ') ."</caption>\n";

  // First day of week (0 => Sunday, 1 => Monday, ...)
  $weekstart = fo_1_variable_get('date_first_day', 0);

  // Last day of week
  ($weekstart - 1 == -1) ? $lastday = 6 : $lastday = $weekstart - 1;

  // Generate the days of the week:
  $firstcolumn = mktime(0, 0, 0, 3, 20 + $weekstart, 1994);

  $output .= " <tr class=\"header-week\">\n";
  $days = array(fo_1_text('Sunday') => fo_1_text('Su'), fo_1_text('Monday') => fo_1_text('Mo'), fo_1_text('Tuesday') => fo_1_text('Tu'), fo_1_text('Wednesday') => fo_1_text('We'), fo_1_text('Thursday') => fo_1_text('Th'), fo_1_text('Friday') => fo_1_text('Fr'), fo_1_text('Saturday') => fo_1_text('Sa'));
  if ($weekstart) {
    $days = array_merge(array_slice($days, $weekstart), array_slice($days, 0, $weekstart));
  }

  foreach ($days as $fullname => $name) {
    $output .= ' <th abbr="'. $fullname .'">'. $name . "</th>\n";
  }
  $output .= "</tr>\n";

  // Initialize temporary variables:
  $nday = 1;
  $sday = $first;

  // Loop through all the days of the month:
  while ($nday <= $last) {
    // Set up blank days for first week of the month (allowing individual blank day styling):
    if ($first != $weekstart) {
      $blankdays = ($first - $weekstart + 7) % 7;
      $output .= " <tr class=\"row-week\">" . str_repeat("<td class=\"day-blank\">&nbsp;</td>\n", $blankdays);
      $first = $weekstart;
    }
    // Start every week on a new line:
    if ($sday == $weekstart) {
      $output .= " <tr class=\"row-week\">\n";
    }

    // Print one cell:
    $date = mktime(0, 0, 0, $month, $nday, $year) + $user->timezone;
    if (isset($days_with_posts[$nday])) {
      $daytext = fo_1_link($nday, "archive/$year/$month/$nday", array("title" => fo_1_format_plural($days_with_posts[$nday], "1 post", "%count posts")));
      $dayclass = 'day-link';
    }
    else {
      $daytext = $nday;
      $dayclass = 'day-normal';
    }
    if ($date == $requested) {
      $output .= "  <td class=\"day-selected\">$daytext</td>\n";
    }
    else if ($date == $start_of_today) {
      $output .= "  <td class=\"day-today\">$daytext</td>\n";
    }
    else if ($date > $end_of_today) {
      $output .= "  <td class=\"day-future\">$daytext</td>\n";
    }
    else {
      $output .= "  <td class=\"$dayclass\">$daytext</td>\n";
    }

    // Start every week on a new line:
    if ($sday == $lastday) {
      $output .=  " </tr>\n";
    }

    // Update temporary variables:
    $sday++;
    $sday = $sday % 7;
    $nday++;
  }

  // Complete the calendar (allowing individual blank day styling):
  if ($sday != $weekstart) {
    $end = (7 - $sday + $weekstart) % 7;
    $output .= str_repeat("<td class=\"day-blank\">&nbsp;</td>\n", $end) . "</tr>\n";
  }

  $output .= "</table></div>\n\n";

  fo_1_cache_set("archive:calendar:$day-$month-$year", $output, CACHE_TEMPORARY);

  return $output;
}

/**
 * Menu callback; lists all nodes posted on a given date.
 */
function archive_page($year = 0, $month = 0, $day = 0) {
  global $user;

  $date = mktime(0, 0, 0, $month, $day, $year) - $user->timezone;
  $date_end = mktime(0, 0, 0, $month, $day + 1, $year) - $user->timezone;

  // Display form.
  $output = archive_browse_form($year, $month, $day);

  if ($year && $month && $day) {
    // Fetch nodes for the selected date, if one was specified.
    $sql = db_rewrite_sql('SELECT n.nid, n.created FROM {node} n WHERE n.status = 1 AND n.created > %d AND n.created < %d ORDER BY n.created');
    $countsql = db_rewrite_sql('SELECT count(n.nid) FROM {node} n WHERE n.status = 1 AND n.created > %d AND n.created < %d ORDER BY n.created');
    $result = pager_query($sql, fo_1_variable_get('default_nodes_main', 10), 0, $countsql, $date, $date_end);
    if (db_num_rows($result) > 0) {
      while ($nid = db_fetch_object($result)) {
        $output .= node_view(node_load($nid->nid), 1);
      }
      $output .= theme('pager');
    }
    else {
      $output .= theme('box', fo_1_text('No posts found.'), '');
    }
  }
  else {
    $output .= theme('box', fo_1_text('No posts found.'), '');
  }

  return $output;
}

/**
 * Generate a form that retrieves archives for a certain date.
 */
function archive_browse_form($year, $month, $day) {
  // Prepare the values of the form fields.
  $years = fo_1_map_assoc(range(2000, date('Y')));
  $months = array(1 => fo_1_text('January'), 2 => fo_1_text('February'), 3 => fo_1_text('March'), 4 => fo_1_text('April'), 5 => fo_1_text('May'), 6 => fo_1_text('June'), 7 => fo_1_text('July'), 8 => fo_1_text('August'), 9 => fo_1_text('September'), 10 => fo_1_text('October'), 11 => fo_1_text('November'), 12 => fo_1_text('December'));
  $days = fo_1_map_assoc(range(1, 31));

  $form['year']  = array('#type' => 'select',
    '#default_value' => ($year ? $year : date('Y')),
    '#options' => $years,
  );
  $form['month'] = array('#type' => 'select',
    '#default_value' => ($month ? $month : date('m')),
    '#options' => $months,
  );
  $form['day']   = array('#type' => 'select',
    '#default_value' => ($day ? $day : date('d')),
    '#options' => $days,
  );
  $form['show']  = array('#type' => 'submit',
    '#value' => fo_1_text('Show'),
  );

  return fo_1_get_form('archive_browse_form', $form);
}

/**
 * Process archive browse form submission.
 */
function archive_browse_form_submit($form_id, $form_values) {
  return('archive/'. $form_values['year'] .'/'. $form_values['month'] .'/'. $form_values['day']);
}

/**
 * Form theme function; displays the archive date navigation form inline.
 */
function theme_archive_browse_form($form) {
  $output = '<div class="container-inline archive">' . form_render($form) . '</div>';
  return $output;
}
