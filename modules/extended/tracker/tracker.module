<?php
// $Id: tracker.module,v 1.129.2.2 2007/01/01 17:50:01 killes Exp $

/**
 * @file
 * Enables tracking of recent posts for users.
 */

/**
 * Implementation of hook_help().
 */
function tracker_help($section) {
  switch ($section) {
    case 'admin/help#tracker':
      $output = '<p>'. fo_1_text('The tracker module displays the most recently added or updated content to the website allowing users to see the most recent contributions.  The tracker module provides user level tracking for those who like to follow the contributions of particular authors.') .'</p>';
      $output .= '<p>'. fo_1_text('The  &quot;recent posts&quot; page is available via a link in the navigation menu block and contains a reverse chronological list of new and recently-updated content. The table displays  the content type, the title, the author\'s name, how many comments that item has received, and when it was last updated. Updates include any changes to the text, either by the original author or someone else, as well as any new comments added to an item.  To use the tracker module to <em>watch</em> for a user\'s updated content, click on that user\'s profile, then the <em>track</em> tab.') .'</p>';
      $output .= fo_1_text('<p>You can</p>
<ul>
<li>view the <a href="%tracker">most recent posts</a>.</li>
<li>view <a href="%profile">user profiles</a> and select the track tab.</li>
<li>not administer this module.</li>
</ul>
', array('%tracker' => fo_1_url('tracker'), '%profile' => fo_1_url('profile')));
      $output .= '<p>'. fo_1_text('For more information please read the configuration and customization handbook <a href="%tracker">Tracker page</a>.', array('%tracker' => 'http://fireorb.info/handbook/modules/tracker/')) .'</p>';
      return $output;
    case 'admin/modules#description':
      return fo_1_text('Enables tracking of recent posts for users.');
  }
}

/**
 * Implementation of hook_menu().
 */
function tracker_menu($may_cache) {
  global $user;
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'tracker', 'title' => fo_1_text('recent posts'),
      'callback' => 'tracker_page', 'access' => user_access('access content'),
      'weight' => 1);

    if ($user->uid) {
      $items[] = array('path' => 'tracker/all', 'title' => fo_1_text('all recent posts'),
        'type' => MENU_DEFAULT_LOCAL_TASK);
      $items[] = array('path' => 'tracker/'. $user->uid, 'title' => fo_1_text('my recent posts'),
        'type' => MENU_LOCAL_TASK);
    }
  }
  else {
    if (arg(0) == 'user' && is_numeric(arg(1))) {
      $items[] = array('path' => 'user/'. arg(1) .'/track', 'title' => fo_1_text('track'),
          'callback' => 'tracker_track_user', 'access' => user_access('access content'),
          'type' => MENU_IS_LOCAL_TASK);
      $items[] = array('path' => 'user/'. arg(1) .'/track/posts', 'title' => fo_1_text('track posts'),
          'type' => MENU_DEFAULT_LOCAL_TASK);
    }
  }

  return $items;
}

/**
 * Menu callback. Prints a listing of active nodes on the site.
 */
function tracker_track_user() {
  if ($account = user_load(array('uid' => arg(1)))) {
    if ($account->status || user_access('administer users')) {
      fo_1_set_title(fo_1_check_plain($account->name));
      return tracker_page($account->uid);
    }
    else {
      fo_1_access_denied();
    }
  }
  else {
    fo_1_not_found();
  }
}

/**
 * Menu callback. Prints a listing of active nodes on the site.
 */
function tracker_page($uid = 0) {
  // TODO: These queries are very expensive, see http://fireorb.info/node/105639
  if ($uid) {
    $sql = 'SELECT DISTINCT(n.nid), n.title, n.type, n.changed, n.uid, u.name, GREATEST(n.changed, l.last_comment_timestamp) AS last_updated, l.comment_count FROM {node} n INNER JOIN {node_comment_statistics} l ON n.nid = l.nid INNER JOIN {users} u ON n.uid = u.uid LEFT JOIN {comments} c ON n.nid = c.nid AND (c.status = %d OR c.status IS NULL) WHERE n.status = 1 AND (n.uid = %d OR c.uid = %d) ORDER BY last_updated DESC';
    $sql = db_rewrite_sql($sql);
    $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n LEFT JOIN {comments} c ON n.nid = c.nid AND (c.status = %d OR c.status IS NULL) WHERE n.status = 1 AND (n.uid = %d OR c.uid = %d)';
    $sql_count = db_rewrite_sql($sql_count);
    $result = pager_query($sql, 25, 0, $sql_count, COMMENT_PUBLISHED, $uid, $uid);
  }
  else {
    $sql = 'SELECT DISTINCT(n.nid), n.title, n.type, n.changed, n.uid, u.name, GREATEST(n.changed, l.last_comment_timestamp) AS last_updated, l.comment_count FROM {node} n INNER JOIN {users} u ON n.uid = u.uid INNER JOIN {node_comment_statistics} l ON n.nid = l.nid WHERE n.status = 1 ORDER BY last_updated DESC';
    $sql = db_rewrite_sql($sql);
    $sql_count = 'SELECT COUNT(n.nid) FROM {node} n WHERE n.status = 1';
    $sql_count = db_rewrite_sql($sql_count);
    $result = pager_query($sql, 25, 0, $sql_count);
  }

  while ($node = db_fetch_object($result)) {
    // Determine the number of comments:
    $comments = 0;
    if (module_exist('comment') && $node->comment_count) {
      $comments = $node->comment_count;

      if ($new = comment_num_new($node->nid)) {
        $comments .= '<br />';
        $comments .= fo_1_link(fo_1_format_plural($new, '1 new', '%count new'), "node/$node->nid", NULL, NULL, 'new');
      }
    }

    
      
      $output .= fo_1_link($node->title, "node/$node->nid") .' '. theme('mark', node_mark($node->nid, $node->changed));
      $output .= '<br />'.theme('username', $node) .' - '. fo_1_text('this ');
	  $output .= node_get_name($node->type);
      $output .= fo_1_text(' has ') . $comments . fo_1_text(' comments ');
      $output .= ' - ' . fo_1_text('%time ago', array('%time' => fo_1_format_interval(time() - $node->last_updated)));
	  
  }

  $header = array(fo_1_text('Type'), fo_1_text('Post'), fo_1_text('Author'), fo_1_text('Replies'), fo_1_text('Last post'));

  $output .= '<div id="tracker">';
  
  $output .= theme('pager', NULL, 25, 0);
  $output .= '</div>';

  return $output;
}
